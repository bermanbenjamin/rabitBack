// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output   = "../src/@generated"
}

model User {
  id               String      @id @default(uuid())
  name             String
  email            String      @unique
  age              Int
  birthdate        DateTime
  coins            Int         @default(0)
  bestStreak       Int         @default(0)
  currentStreak    Int         @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  isDeleted        Boolean     @default(false)
  lastDailyReward  DateTime    @default(now())
  dailyRewardCount Int         @default(0)
  userSettingsId   String      @unique
  plants           PlantEnum[]

  userSettings UserSettings @relation(name: "UserToUserSettings", fields: [userSettingsId], references: [id])
  routines     Routine[]    @relation(name: "RoutineToUser")
  habits       Habit[]      @relation(name: "HabitToUser")
  toDos        ToDoList[]   @relation(name: "ToDoListToUser")
}

model UserSettings {
  id              String  @id @default(uuid())
  user            User?   @relation(name: "UserToUserSettings")
  isOnVacation    Boolean @default(false)
  isWithoutAlarms Boolean @default(false)
  weekStartsOn    Int     @default(0)
}

model Routine {
  id        String   @id @default(uuid())
  User      User?    @relation(name: "RoutineToUser", fields: [userId], references: [id])
  userId    String?
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  habits    Habit[]  @relation(name: "HabitToRoutine")
}

model Habit {
  id              String          @id @default(uuid())
  routineId       String?
  userId          String?
  frequencyPerDay Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  title           String
  isPaused        Boolean         @default(false)
  lastPlantReward DateTime        @default(now())
  isDeleted       Boolean         @default(false)
  habitPlantId    String          @unique
  habitTimerId    String          @unique
  habitIntervalId String          @unique
  color           HabitColorEnum  @default(cyan)
  icon            HabitIconEnum
  period          HabitPeriodEnum @default(anyTime)

  history  HabitHistoryDay[] @relation(name: "HabitToHabitHistoryDay")
  timer    HabitTimer        @relation(name: "HabitToHabitTimer", fields: [habitTimerId], references: [id])
  Routine  Routine?          @relation(name: "HabitToRoutine", fields: [routineId], references: [id])
  User     User?             @relation(name: "HabitToUser", fields: [userId], references: [id])
  plant    HabitPlant        @relation(name: "HabitToHabitPlant", fields: [habitPlantId], references: [id])
  reminder HabitReminder[]   @relation(name: "HabitToHabitReminder")
  interval HabitInterval     @relation(name: "HabitToHabitInterval", fields: [habitIntervalId], references: [id])
}

model HabitPlant {
  id           String    @id @default(uuid())
  habit        Habit?    @relation(name: "HabitToHabitPlant")
  positionBot  Int
  positionLeft Int
  plant        PlantEnum @default(piuva)
}

model HabitReminder {
  id      String   @id @default(uuid())
  Habit   Habit    @relation(name: "HabitToHabitReminder", fields: [habitId], references: [id])
  habitId String
  date    DateTime
  isAlarm Boolean  @default(false)
}

model HabitTimer {
  id       String   @id @default(uuid())
  habit    Habit?   @relation(name: "HabitToHabitTimer")
  isActive Boolean  @default(false)
  time     DateTime @default(now())
}

model HabitInterval {
  id           String                @id @default(uuid())
  Habit        Habit?                @relation(name: "HabitToHabitInterval")
  timesPerWeek Int
  daysOfWeek   Int[]
  type         HabitIntervalTypeEnum @default(daily)
}

model HabitHistoryDay {
  id                  String   @id @default(uuid())
  Habit               Habit    @relation(name: "HabitToHabitHistoryDay", fields: [habitId], references: [id])
  habitId             String
  date                DateTime @unique @default(now())
  frequencyOnThisDay  Int      @default(0)
  doneTimes           Int      @default(0)
  secondsPerFrequency Int[]
}

model ToDoList {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  userId    String?

  tasks ToDoTask[] @relation(name: "ToDoListToToDoTask")
  user  User?      @relation(name: "ToDoListToUser", fields: [userId], references: [id])
}

model ToDoTask {
  id                      String             @id @default(uuid())
  toDoListId              String             @unique
  title                   String
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  lastDone                DateTime?
  date                    DateTime
  frequenciesByRepeatType Int                @default(1)
  daysOfWeek              Int[]
  repeatType              DateTimeRepeatEnum @default(never)

  subTasks ToDoSubtask[] @relation(name: "ToDoSubtaskToToDoTask")
  toDoList ToDoList      @relation(name: "ToDoListToToDoTask", fields: [toDoListId], references: [id])
}

model ToDoSubtask {
  id         String   @id @default(uuid())
  toDoTask   ToDoTask @relation(name: "ToDoSubtaskToToDoTask", fields: [toDoTaskId], references: [id])
  toDoTaskId String   @unique
  title      String
  isDone     Boolean  @default(false)
}

enum HabitColorEnum {
  blue
  brown
  green
  orange
  cyan
  pink
  purple
  red
  yellow
}

enum HabitIconEnum {
  purple1
  purple2
  purple3
  purple4
  orange1
  orange2
  orange3
  orange4
  cyan1
  cyan2
  cyan3
  cyan4
  red1
  red2
  red3
  red4
  red5
  red6
  red7
  blue1
  blue2
  blue3
  blue4
  green1
  green2
  green3
  green4
  pink1
  pink2
  pink3
  pink4
  pink5
  pink6
  pink7
  yellow1
  yellow2
  yellow3
  yellow4
  brown1
  brown2
  brown3
  brown4
  brown5
  brown6
  brown7
  purple5
  purple6
  purple7
  purple8
  orange5
  orange6
  orange7
  orange8
  cyan5
  cyan6
  cyan7
  cyan8
  red8
  red9
  red10
  red11
  red12
  blue5
  blue6
  blue7
  green5
  green6
  green7
  green8
  pink8
  brown8
}

enum HabitIntervalTypeEnum {
  everyOtherDay
  daily
  weekly
}

enum HabitPeriodEnum {
  anyTime
  morning
  evening
  night
}

enum DateTimeRepeatEnum {
  never
  day
  week
  month
}

enum PlantEnum {
  piuva
  almofadinha
  mrCarrot
  nunos
  losNachos
  miau
  esconderijoDoToto
  caioCoqueiro
  cartolesco
}
